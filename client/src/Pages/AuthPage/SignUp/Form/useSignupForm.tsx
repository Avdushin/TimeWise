import { useState, useEffect } from "react";
import { useForm } from "@mantine/form";
import { Paths } from "@Components/App/Routing";
import { notifications } from "@mantine/notifications";
import { API } from "@/Components/App/Routing/types/API";
import { useNavigate } from "react-router-dom";
import { $host } from "@/Services/instance";
import { AxiosError } from 'axios';
import { initialValues } from "./initialValues";

export const useSignupForm = () => {
  const [active, setActive] = useState(0);
  const [birthval, setBirthval] = useState<Date | null>(null);
  const [registrationSuccess, setRegistrationSuccess] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    if (registrationSuccess) {
      navigate(Paths.Login);
    }
  }, [registrationSuccess]);

  const form = useForm({
    initialValues,
    validate: (values) => {
      if (active === 0) {
        return {
          username: values.username.trim().length < 3 ? "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤." : null,
          email: !/^\S+@\S+\.\S+$/.test(values.email) ? "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email" : null,
          password: values.password.length < 6 ? "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤" : null,
        };
      }
      return {};
    },
  });

  const nextStep = () => setActive((current) => (form.validate().hasErrors ? current : current + 1));
  const prevStep = () => setActive((current) => (current > 0 ? current - 1 : current));

  const submitForm = async () => {
    const registrationData = {
      username: form.values.username,
      email: form.values.email,
      password: form.values.password,
      birthdate: form.values.birthdate,
      first_name: form.values.first_name,
      last_name: form.values.last_name,
      middle_name: form.values.middle_name,
      country: form.values.country,
      city: form.values.city,
      phone: form.values.phone,
    };
  
    try {
      const response = await $host.post(API.SignUP, registrationData);
  
      if (response.status === 409) {
        notifications.show({
          title: "–û—à–∏–±–∫–∞",
          message: "–¢–∞–∫–æ–π Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! ü§•",
          color: "red",
        });
      } else {
        notifications.show({
          title: "–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
          message: "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...",
          color: "teal",
        });
        setRegistrationSuccess(true);
      }
    } catch (error) {
      if (error instanceof AxiosError && error.response) {
        notifications.show({
          title: "–û—à–∏–±–∫–∞",
          message: error.response.data.message || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã",
          color: "red",
        });
      } else {
        notifications.show({
          title: "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏",
          message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
          color: "red",
        });
      }
    }
  };
  

  return {
    active,
    birthval,
    setBirthval,
    registrationSuccess,
    form,
    nextStep,
    prevStep,
    submitForm,
  };
};
